// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:weather_broadcast/models/forecast_entity.dart';
import 'package:weather_broadcast/generated/json/forecast_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {			case ForecastEntity:
			return forecastEntityFromJson(data as ForecastEntity, json) as T;			case ForecastCoord:
			return forecastCoordFromJson(data as ForecastCoord, json) as T;			case ForecastWeather:
			return forecastWeatherFromJson(data as ForecastWeather, json) as T;			case ForecastMain:
			return forecastMainFromJson(data as ForecastMain, json) as T;			case ForecastWind:
			return forecastWindFromJson(data as ForecastWind, json) as T;			case ForecastClouds:
			return forecastCloudsFromJson(data as ForecastClouds, json) as T;			case ForecastSys:
			return forecastSysFromJson(data as ForecastSys, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {			case ForecastEntity:
			return forecastEntityToJson(data as ForecastEntity);			case ForecastCoord:
			return forecastCoordToJson(data as ForecastCoord);			case ForecastWeather:
			return forecastWeatherToJson(data as ForecastWeather);			case ForecastMain:
			return forecastMainToJson(data as ForecastMain);			case ForecastWind:
			return forecastWindToJson(data as ForecastWind);			case ForecastClouds:
			return forecastCloudsToJson(data as ForecastClouds);			case ForecastSys:
			return forecastSysToJson(data as ForecastSys);    }
    return data as T;
  }
  //Go back to a single instance by type
  static _fromJsonSingle(String type, json) {
    switch (type) {			case 'ForecastEntity':
			return ForecastEntity().fromJson(json);			case 'ForecastCoord':
			return ForecastCoord().fromJson(json);			case 'ForecastWeather':
			return ForecastWeather().fromJson(json);			case 'ForecastMain':
			return ForecastMain().fromJson(json);			case 'ForecastWind':
			return ForecastWind().fromJson(json);			case 'ForecastClouds':
			return ForecastClouds().fromJson(json);			case 'ForecastSys':
			return ForecastSys().fromJson(json);    }
    return null;
  }

  //empty list is returned by type
  static _getListFromType(String type) {
    switch (type) {			case 'ForecastEntity':
			return List<ForecastEntity>();			case 'ForecastCoord':
			return List<ForecastCoord>();			case 'ForecastWeather':
			return List<ForecastWeather>();			case 'ForecastMain':
			return List<ForecastMain>();			case 'ForecastWind':
			return List<ForecastWind>();			case 'ForecastClouds':
			return List<ForecastClouds>();			case 'ForecastSys':
			return List<ForecastSys>();    }
    return null;
  }

  static M fromJsonAsT<M>(json) {
    String type = M.toString();
    if (json is List && type.contains("List<")) {
      String itemType = type.substring(5, type.length - 1);
      List tempList = _getListFromType(itemType);
      json.forEach((itemJson) {
        tempList
            .add(_fromJsonSingle(type.substring(5, type.length - 1), itemJson));
      });
      return tempList as M;
    } else {
      return _fromJsonSingle(M.toString(), json) as M;
    }
  }
}