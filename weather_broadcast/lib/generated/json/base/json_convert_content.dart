// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:weather_broadcast/broadcast_entity.dart';
import 'package:weather_broadcast/generated/json/broadcast_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {			case BroadcastEntity:
			return broadcastEntityFromJson(data as BroadcastEntity, json) as T;			case BroadcastCoord:
			return broadcastCoordFromJson(data as BroadcastCoord, json) as T;			case BroadcastWeather:
			return broadcastWeatherFromJson(data as BroadcastWeather, json) as T;			case BroadcastMain:
			return broadcastMainFromJson(data as BroadcastMain, json) as T;			case BroadcastWind:
			return broadcastWindFromJson(data as BroadcastWind, json) as T;			case BroadcastClouds:
			return broadcastCloudsFromJson(data as BroadcastClouds, json) as T;			case BroadcastSys:
			return broadcastSysFromJson(data as BroadcastSys, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {			case BroadcastEntity:
			return broadcastEntityToJson(data as BroadcastEntity);			case BroadcastCoord:
			return broadcastCoordToJson(data as BroadcastCoord);			case BroadcastWeather:
			return broadcastWeatherToJson(data as BroadcastWeather);			case BroadcastMain:
			return broadcastMainToJson(data as BroadcastMain);			case BroadcastWind:
			return broadcastWindToJson(data as BroadcastWind);			case BroadcastClouds:
			return broadcastCloudsToJson(data as BroadcastClouds);			case BroadcastSys:
			return broadcastSysToJson(data as BroadcastSys);    }
    return data as T;
  }
  //Go back to a single instance by type
  static _fromJsonSingle(String type, json) {
    switch (type) {			case 'BroadcastEntity':
			return BroadcastEntity().fromJson(json);			case 'BroadcastCoord':
			return BroadcastCoord().fromJson(json);			case 'BroadcastWeather':
			return BroadcastWeather().fromJson(json);			case 'BroadcastMain':
			return BroadcastMain().fromJson(json);			case 'BroadcastWind':
			return BroadcastWind().fromJson(json);			case 'BroadcastClouds':
			return BroadcastClouds().fromJson(json);			case 'BroadcastSys':
			return BroadcastSys().fromJson(json);    }
    return null;
  }

  //empty list is returned by type
  static _getListFromType(String type) {
    switch (type) {			case 'BroadcastEntity':
			return List<BroadcastEntity>();			case 'BroadcastCoord':
			return List<BroadcastCoord>();			case 'BroadcastWeather':
			return List<BroadcastWeather>();			case 'BroadcastMain':
			return List<BroadcastMain>();			case 'BroadcastWind':
			return List<BroadcastWind>();			case 'BroadcastClouds':
			return List<BroadcastClouds>();			case 'BroadcastSys':
			return List<BroadcastSys>();    }
    return null;
  }

  static M fromJsonAsT<M>(json) {
    String type = M.toString();
    if (json is List && type.contains("List<")) {
      String itemType = type.substring(5, type.length - 1);
      List tempList = _getListFromType(itemType);
      json.forEach((itemJson) {
        tempList
            .add(_fromJsonSingle(type.substring(5, type.length - 1), itemJson));
      });
      return tempList as M;
    } else {
      return _fromJsonSingle(M.toString(), json) as M;
    }
  }
}